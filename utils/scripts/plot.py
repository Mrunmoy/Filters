#!/usr/bin/env python3
import argparse
import csv
import sys

import matplotlib.pyplot as plt

def read_csv_columns(path, xcol, ycols):
    with open(path, newline="") as f:
        reader = csv.DictReader(f)
        if reader.fieldnames is None:
            raise ValueError("CSV appears to have no header row.")
        # Verify requested columns exist
        missing = [c for c in [xcol] + ycols if c not in reader.fieldnames]
        if missing:
            raise ValueError(f"Missing column(s) in CSV {path}: {missing}. "
                             f"Available: {reader.fieldnames}")
        x = []
        ys = {c: [] for c in ycols}
        for row in reader:
            x.append(float(row[xcol]))
            for c in ycols:
                ys[c].append(float(row[c]))
        return x, ys

def main():
    ap = argparse.ArgumentParser(
        description="Plot columns from a CSV generated by the avg filter test."
    )
    ap.add_argument("csv_path", help="Path to CSV file (e.g., build/avg/test/avg_sim.csv)")
    ap.add_argument("-x", "--xcol", default="t", help="Name of x-axis column (default: t)")
    ap.add_argument("-y", "--ycol", nargs="+", default=["xm", "avg"],
                    help="One or more y columns to plot (default: xm avg)")
    ap.add_argument("-o", "--out", default=None,
                    help="Path to save the figure (e.g., plot.png). If omitted, shows interactively.")
    ap.add_argument("--title", default=None, help="Figure title")
    ap.add_argument("--dpi", type=int, default=120, help="Figure DPI (default: 120)")
    args = ap.parse_args()

    x, ys = read_csv_columns(args.csv_path, args.xcol, args.ycol)

    plt.figure()
    for name, series in ys.items():
        plt.plot(x, series, label=name)  # no explicit colors/styles; defaults are fine
    plt.xlabel(args.xcol)
    plt.ylabel("value")
    if args.title:
        plt.title(args.title)
    plt.legend()
    plt.tight_layout()

    if args.out:
        plt.savefig(args.out, dpi=args.dpi)
        print(f"Saved: {args.out}")
    else:
        plt.show()

if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        print(f"Error: {e}", file=sys.stderr)
        sys.exit(1)
